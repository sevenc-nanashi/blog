{"pageProps":{"markdoc":{"content":{"$$mdtype":"Tag","name":"article","attributes":{},"children":[{"$$mdtype":"Tag","name":"p","attributes":{},"children":["４つ目の記事。"," ","同時再生読み上げBotというものを思いついたので作ってみた。"]},{"$$mdtype":"Tag","name":"Heading","attributes":{"level":2,"id":"コード"},"children":["コード"]},{"$$mdtype":"Tag","name":"Fence","attributes":{"content":"import audioop\nimport discord\n\n\nclass MixAudioSource(discord.AudioSource):\n    def __init__(self) -> None:\n        super().__init__()\n        self.sources = []\n\n    def read(self) -> bytes:\n        data = bytes(3840)  # 3840バイトのバッファを作成\n        for source in self.sources:  # ソースを回す\n            if not (d := source.read()):  # 再生終了\n                source.cleanup()\n                self.sources.remove(source)\n            else:  # 合成\n                data = audioop.add(data, d, 2)\n        return data\n","language":"python"},"children":["import audioop\nimport discord\n\n\nclass MixAudioSource(discord.AudioSource):\n    def __init__(self) -> None:\n        super().__init__()\n        self.sources = []\n\n    def read(self) -> bytes:\n        data = bytes(3840)  # 3840バイトのバッファを作成\n        for source in self.sources:  # ソースを回す\n            if not (d := source.read()):  # 再生終了\n                source.cleanup()\n                self.sources.remove(source)\n            else:  # 合成\n                data = audioop.add(data, d, 2)\n        return data\n"]},{"$$mdtype":"Tag","name":"Heading","attributes":{"level":4,"id":"注意"},"children":["注意"]},{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":["常に再生中マークが出る"]},{"$$mdtype":"Tag","name":"li","attributes":{},"children":["重ねれば重ねるほど音が大きくなる"]}]},{"$$mdtype":"Tag","name":"Heading","attributes":{"level":2,"id":"読み上げ"},"children":["読み上げ"]},{"$$mdtype":"Tag","name":"Fence","attributes":{"content":"from os import getenv\nimport re\nimport discord\nfrom discord.ext import commands\nimport aiohttp\nimport hashlib\nimport os\nfrom dotenv import load_dotenv\n\nfrom mix import MixAudioSource\n\nload_dotenv()\n\nbot = commands.Bot(command_prefix=\"!\", intents=discord.Intents.all())\nsource = MixAudioSource()\nvoices = []\n\n\n@bot.event\nasync def on_ready():\n    global voices\n    c: discord.VoiceClient = await bot.get_channel(int(getenv(\"DISCORD_VC_ID\"))).connect()\n    c.play(source)\n    async with aiohttp.ClientSession() as session:\n        async with session.get(\n            \"https://api.su-shiki.com/v2/voicevox/speakers/\",\n            params={\"key\": getenv(\"VV_KEY\")},\n        ) as resp:\n            voices = [j[\"styles\"][0][\"id\"] for j in await resp.json()]\n\n\n@bot.event\nasync def on_message(message):\n    if message.author.bot:\n        return\n    if message.channel.id != int(getenv(\"DISCORD_TC_ID\")):\n        return\n    if not message.clean_content:\n        return\n    speaker = message.author.id % len(voices)\n    print(f\"{message.author} : {speaker}\")\n    content = message.clean_content\n    content = re.sub(r\"<a?:([a-zA-Z_]+):\\d+>\", r\"\\1\", content)\n    content = re.sub(r\"https?://[^\\s]+\", r\"\", content)\n    txt_hash = hashlib.sha256(f\"{content}-{speaker}\".encode(\"utf-8\")).hexdigest()\n    if not os.path.exists(f\"voice/{txt_hash}.wav\"):\n        async with aiohttp.ClientSession() as session:\n            async with session.get(\n                \"https://api.su-shiki.com/v2/voicevox/audio\",\n                params={\n                    \"text\": content,\n                    \"key\": getenv(\"VV_KEY\"),\n                    \"speaker\": voices[speaker],\n                    \"enable_interrogative_upspeak\": \"true\",\n                },\n            ) as resp:\n                with open(f\"voice/{txt_hash}.wav\", \"wb\") as f:\n                    f.write(await resp.read())\n\n    source.sources.append(discord.FFmpegPCMAudio(f\"voice/{txt_hash}.wav\"))\n\n\nbot.run(getenv(\"TOKEN\"))\n","language":"python"},"children":["from os import getenv\nimport re\nimport discord\nfrom discord.ext import commands\nimport aiohttp\nimport hashlib\nimport os\nfrom dotenv import load_dotenv\n\nfrom mix import MixAudioSource\n\nload_dotenv()\n\nbot = commands.Bot(command_prefix=\"!\", intents=discord.Intents.all())\nsource = MixAudioSource()\nvoices = []\n\n\n@bot.event\nasync def on_ready():\n    global voices\n    c: discord.VoiceClient = await bot.get_channel(int(getenv(\"DISCORD_VC_ID\"))).connect()\n    c.play(source)\n    async with aiohttp.ClientSession() as session:\n        async with session.get(\n            \"https://api.su-shiki.com/v2/voicevox/speakers/\",\n            params={\"key\": getenv(\"VV_KEY\")},\n        ) as resp:\n            voices = [j[\"styles\"][0][\"id\"] for j in await resp.json()]\n\n\n@bot.event\nasync def on_message(message):\n    if message.author.bot:\n        return\n    if message.channel.id != int(getenv(\"DISCORD_TC_ID\")):\n        return\n    if not message.clean_content:\n        return\n    speaker = message.author.id % len(voices)\n    print(f\"{message.author} : {speaker}\")\n    content = message.clean_content\n    content = re.sub(r\"<a?:([a-zA-Z_]+):\\d+>\", r\"\\1\", content)\n    content = re.sub(r\"https?://[^\\s]+\", r\"\", content)\n    txt_hash = hashlib.sha256(f\"{content}-{speaker}\".encode(\"utf-8\")).hexdigest()\n    if not os.path.exists(f\"voice/{txt_hash}.wav\"):\n        async with aiohttp.ClientSession() as session:\n            async with session.get(\n                \"https://api.su-shiki.com/v2/voicevox/audio\",\n                params={\n                    \"text\": content,\n                    \"key\": getenv(\"VV_KEY\"),\n                    \"speaker\": voices[speaker],\n                    \"enable_interrogative_upspeak\": \"true\",\n                },\n            ) as resp:\n                with open(f\"voice/{txt_hash}.wav\", \"wb\") as f:\n                    f.write(await resp.read())\n\n    source.sources.append(discord.FFmpegPCMAudio(f\"voice/{txt_hash}.wav\"))\n\n\nbot.run(getenv(\"TOKEN\"))\n"]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["面倒だったため、以下の機能が実装されていない："]},{"$$mdtype":"Tag","name":"ul","attributes":{},"children":[{"$$mdtype":"Tag","name":"li","attributes":{},"children":["使い終わったファイルの削除"]},{"$$mdtype":"Tag","name":"li","attributes":{},"children":["任意のチャンネルへの接続"]},{"$$mdtype":"Tag","name":"li","attributes":{},"children":["VC外のユーザーの除外"]},{"$$mdtype":"Tag","name":"li","attributes":{},"children":["辞書"]}]},{"$$mdtype":"Tag","name":"Heading","attributes":{"level":2,"id":"で、実用性は？"},"children":["で、実用性は？"]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["ない（断言）",{"$$mdtype":"Tag","name":"br","attributes":{},"children":[]},"同時再生するとカオスになって面白くなるかな～？って思ってやった結果がこれだよ！"]},{"$$mdtype":"Tag","name":"Heading","attributes":{"level":2,"id":"おわり"},"children":["おわり"]},{"$$mdtype":"Tag","name":"p","attributes":{},"children":["読み上げと音楽再生を両方する的なことができそう。",{"$$mdtype":"Tag","name":"br","attributes":{},"children":[]},"コードは自由に使ってください。",{"$$mdtype":"Tag","name":"br","attributes":{},"children":[]},"おわり。"]}]},"frontmatter":{"title":"d.pyで複数のAudioSourceを同時に再生する","summary":"d.pyで複数のAudioSourceを同時に再生したかっただけ","tags":["discord.py","Python"]},"file":{"path":"/articles/dpy_mix_audio_source.md"}}},"__N_SSG":true}